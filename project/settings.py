"""
Django settings.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

############################
# Application definition
############################
INSTALLED_APPS = [

    # Django built in libraries we're using
    'django.contrib.postgres',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Health check modules
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.contrib.migrations',
    'health_check.contrib.psutil',

    # Third-party Libraries
    'rest_framework',
    'django_filters',
    'drf_spectacular',


    # Authentication app
    'apps.authentication',

    # COOKIECUTTER APP
    # TODO: REMOVE THIS IN A REAL PROJECT, IT'S JUST TESTS AND EXAMPLES



    # Apps
    'apps.shared'
]

# Requests are passed through each middleware in order on it's way down to the
# view function/class, and then the response object is passed back up again
# in reverse order.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# The module containing the routing file
ROOT_URLCONF = 'project.urls'
WSGI_APPLICATION = 'project.wsgi.application'
AUTH_USER_MODEL = "authentication.User"
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

###################################
# Runtime configuration
# These values configure how the application should run in this environment.
###################################
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# The secret key is used as a seed for cryptographic functions
# It should be a random string on the server but it's not a "secret" in the
# way e.g. database configuration or API keys are.
SECRET_KEY = os.environ.get('SECRET_KEY', None)

# SECURITY WARNING: don't have debug enabled on an internet facing server!
# It can leak secrets and configuration through the debug pages
DEBUG = bool(int(os.environ.get('DEBUG', False)))

# Toggles the API documentation on/off
ENABLE_BROWSEABLE = bool(int(os.environ.get('ENABLE_BROWSEABLE', False)))


###################################
# Application configuration
# These values should be populated from a config file/environment variable
# Mostly secrets.
###################################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST', ""),
        'PORT': os.environ.get('DB_PORT', 5432),
        'NAME': os.environ.get('DB_NAME', ""),
        'USER': os.environ.get('DB_USER', ""),
        'PASSWORD': os.environ.get('DB_PASSWORD', "")
    },
}

REDIS_URL = os.environ.get('REDIS_URL', "")

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': f"{REDIS_URL}"
    },
}


ALLOWED_HOSTS = ["*"]

# Admin
ADMIN_SITE_HEADER = "Django Admin"
ADMIN_SITE_TITLE = "Django Admin"

# Authentication
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# Uncomment and provide Google OAuth settings to use google SSO
# Other providers can be added by referring to:
# https://python-social-auth.readthedocs.io/en/latest/backends/
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)



# Django REST Framework configuration
# Refer to: https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'],
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.OrderingFilter',
        'django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # Project-wide default page size, overriddable in ModelViewSet
    'PAGE_SIZE': 100}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Project API',
    'DESCRIPTION': 'Project swagger documentation',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Djoser: auth API routes
# https://djoser.readthedocs.io/en/latest/settings.html

MGMT_HOST = os.environ.get("MGMT_HOST", "")
FE_HOST = os.environ.get("FE_HOST", "")

DJOSER = {
    "DASHBOARD_ACTIVATION_URL": "{MGMT_HOST}/confirm-signup?uid={uid}&token={token}",  # noqa: E501
    "ACTIVATION_URL": "{FE_HOST}/confirm-signup?uid={uid}&token={token}",
    "DASHBOARD_RESET_CONFIRM_URL": "{MGMT_HOST}/confirm-password?uid={uid}&token={token}",  # noqa: E501
    "PASSWORD_RESET_CONFIRM_URL": "{FE_HOST}/confirm-password?uid={uid}&token={token}",  # noqa: E501
    "USERNAME_RESET_CONFIRM_URL": "{FE_HOST}/username/reset/confirm?uid={uid}&token={token}",  # noqa: E501
    "TOKEN_MODEL": None,
    "LOGIN_FIELD": "email",
    "SEND_ACTIVATION_EMAIL": True,
    "SEND_CONFIRMATION_EMAIL": True,
    "EMAIL": {
        "activation": "apps.authentication.email.ExtendedActivationEmail",
        "confirmation": "apps.authentication.email.ExtendedConfirmationEmail",
        "password_reset": "apps.authentication.email.ExtendedPasswordResetEmail",  # noqa: E501
        "password_changed_confirmation": "apps.authentication.email.ExtendedPasswordChangedConfirmationEmail",  # noqa: E501
        "username_changed_confirmation": "apps.authentication.email.ExtendedUsernameChangedConfirmationEmail",  # noqa: E501
        "username_reset": "apps.authentication.email.ExtendedUsernameResetEmail",  # noqa: E501
    },
    "SERIALIZERS": {

        'current_user': 'apps.dashboard_user_management.serializers.UserSerializer',  # noqa: E501

    }
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT', 'Bearer'),
}

if ENABLE_BROWSEABLE:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append(
        'rest_framework.renderers.BrowsableAPIRenderer')


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},  # noqa: E501
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},  # noqa: E501
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},  # noqa: E501
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},  # noqa: E501
]


# Configuration for HTML template rendering
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = "/static/"

# Health check values
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,  # in MB
}


# Try local settings import
# For projects deployed on a server without docker we use this to provide
# configuration and secrets instead of environment variables as it's a lot
# more convenient.
# Importing in this way will let us override any values in this file
try:
    from .local_settings import *  # noqa: F403,F401
    print("Imported local_settings.py file")
except ImportError:
    pass
    print(
        "No local_settings.py file, continuing with what we got from "
        "environment variables")
